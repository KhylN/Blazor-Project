@page "/events/{id:int}"
@using EventEase.Models
@inject EventEase.Services.SessionState Session

@if (!loaded)
{
    <p>Loadingâ€¦</p>
}
else if (notFound)
{
    <div class="alert alert-warning">Event not found.</div>
}
else
{
    <h1>@ev!.Title</h1>
    <p><strong>Date:</strong> @ev.Date.ToLongDateString()</p>
    <p><strong>Location:</strong> @ev.Location</p>
    <p>@ev.Description</p>

    <hr />
    <h3>Attendance</h3>

    <EditForm Model="@nameModel" OnValidSubmit="@Attend">
        <DataAnnotationsValidator />
        <div class="mb-2">
            <label>Your Name</label>
            <InputText class="form-control" @bind-Value="nameModel.Name" />
            <ValidationMessage For="() => nameModel.Name" />
        </div>
        <button class="btn btn-primary" type="submit">Attend</button>
    </EditForm>

    <h5 class="mt-3">Attendees (@attendees.Count)</h5>
    @if (attendees.Count == 0)
    {
        <p>No attendees yet.</p>
    }
    else
    {
        <ul>
            @foreach (var a in attendees)
            {
                <li>@a <button class="btn btn-sm btn-link" @onclick="() => Remove(a)">remove</button></li>
            }
        </ul>
    }
}

@code {
    [Parameter] public int id { get; set; }

    private EventItem? ev;
    private bool loaded;
    private bool notFound;
    private List<string> attendees = new();

    private NameModel nameModel = new();

    protected override void OnParametersSet()
    {
        loaded = false;
        notFound = false;

        if (EventStore.TryGet(id, out ev))
        {
            RefreshAttendees();
        }
        else
        {
            notFound = true;
        }
        loaded = true;
    }

    private void RefreshAttendees()
    {
        attendees = Session.GetAttendees(id).ToList();
    }

    private void Attend()
    {
        if (ev is null) return;
        if (Session.AddAttendee(id, nameModel.Name))
        {
            RefreshAttendees();
            nameModel = new();
            StateHasChanged();
        }
    }

    private void Remove(string who)
    {
        Session.RemoveAttendee(id, who);
        RefreshAttendees();
    }

    public class NameModel
    {
        [System.ComponentModel.DataAnnotations.Required, System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; } = string.Empty;
    }
}
